<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>年度总结 on cxfksword's notes</title><link>//blog.xetri.net/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</link><description>Recent content in 年度总结 on cxfksword's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>cxfksword@gmail.com (cxfksword)</managingEditor><webMaster>cxfksword@gmail.com (cxfksword)</webMaster><lastBuildDate>Fri, 15 Jan 2021 16:03:08 +0800</lastBuildDate><atom:link href="//blog.xetri.net/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/index.xml" rel="self" type="application/rss+xml"/><item><title>2020年度总结</title><link>//blog.xetri.net/2021/01/the-summary-of-2020/</link><pubDate>Fri, 15 Jan 2021 16:03:08 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.xetri.net/2021/01/the-summary-of-2020/</guid><description>&lt;p>今年对大部分人来说，都会是难忘和难过的一年。年初新冠肺炎大爆发，到处寸步难行，食肆工厂关闭。年中中美关系加剧恶化，中印边境紧张，让人对未来几年的形势越来越担忧，年末新冠肺炎再次来袭，希望不会再出现大爆发了。&lt;/p>
&lt;hugo-encrypt>
&lt;div class="hugo-encrypt-encryption-notice">
&lt;p class="hugo-encryptor-tips">文章的部分内容被密码保护：&lt;/p>
&lt;noscript>&lt;span id="hugo-encrypt-enable-js">Javascript needs to be enabled to decrypt content&lt;/span>&lt;/noscript>
&lt;div class='hugo-encrypt-form'>
&lt;input
class="hugo-encrypt-input"
id="hugo-encrypt-password"
placeholder='请输入密码'
/>
&lt;input
class="hugo-encrypt-button"
type="button"
value='点击验证'
id="button" onclick="hugoDecrypt(document.getElementById('hugo-encrypt-password').value,'input')"
/>
&lt;span class="hugo-encrypt-input-response">&lt;/span>
&lt;/div>
&lt;/div>
&lt;cipher-text data-password='xetri123' style="display:none;">
&lt;p>生活上还是变化不大，时间越来越快了。今年活得比较颓废，现在年龄太大，工作不好找，在转行和找工作间不断徘徊。比较熟的朋友都结婚生子了，平时也不好联系他们，对未来找不到方向。&lt;/p>
&lt;p>今年生活状态：&lt;/p>
&lt;ul>
&lt;li>学完车，拿到C1驾照&lt;/li>
&lt;li>未有女朋友，未婚&lt;/li>
&lt;li>未会游泳&lt;/li>
&lt;/ul>
&lt;/cipher-text>
&lt;style type="text/css">div#hugo-encrypt-sha1sum {display: none;}&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/core.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/sha1.js">&lt;/script>
&lt;script>
const storageKey = location.pathname + "password";
const userStorage = localStorage ;
function str2buf(str) {
return new TextEncoder("utf-8").encode(str);
}
function buf2str(buffer) {
return new TextDecoder("utf-8").decode(buffer);
}
function hex2buf(hexStr) {
return new Uint8Array(hexStr.match(/.{2}/g).map(h => parseInt(h, 16)));
}
function deriveKey(passphrase, salt) {
salt = salt || crypto.getRandomValues(new Uint8Array(8));
return crypto.subtle
.importKey("raw", str2buf(passphrase), "PBKDF2", false, ["deriveKey"])
.then(key =>
crypto.subtle.deriveKey(
{ name: "PBKDF2", salt, iterations: 1000, hash: "SHA-256" },
key,
{ name: "AES-GCM", length: 256 },
false,
["encrypt", "decrypt"],
),
)
.then(key => [key, salt]);
}
function decrypt(passphrase, saltIvCipherHex) {
const [salt, iv, data] = saltIvCipherHex.split("-").map(hex2buf);
return deriveKey(passphrase, salt)
.then(([key]) => crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, data))
.then(v => buf2str(new Uint8Array(v)));
}
function removeNotice() {
var notices = document.getElementsByClassName("hugo-encrypt-encryption-notice");
for (let i = 0; i &lt; notices.length; i++) {
notices[i].remove();
}
}
const hugoDecrypt = function(password, type) {
for (const cipher of ciphers) {
decrypt(password, cipher.innerText).then(function(decrypted_text) {
let hash = CryptoJS.SHA1(decrypted_text.replace(/\r?\n?[^\r\n]*$/, ""));
let sha1_sum = CryptoJS.enc.Hex.stringify(hash);
if ( decrypted_text.includes(sha1_sum) ) {
removeNotice();
decrypted_text = decrypted_text.replace(/&lt;div.*?hugo-encrypt-sha1sum.*?>.*?&lt;\/div>/ig, '');
cipher.parentNode.outerHTML = decrypted_text;
userStorage.setItem(storageKey, password);
console.log("Decryption successful. Storing password in Storage.");
}
}).catch(function(error) {
if (type === "input") {
cipher.parentNode.querySelector('.hugo-encrypt-input-response').innerHTML = "密码错误";
console.log('密码错误', error);
} else if (type === "storage") {
userStorage.removeItem(location.pathname + "password");
console.log("Password changed. Clearing userStorage.", error);
}
});
}
};
&lt;/script>
&lt;script>
window.onload = () => {
ciphers = Array.from(document.querySelectorAll("cipher-text"));
if (userStorage.getItem(storageKey)) {
console.log("Found storageKey in userStorage. Attemtping decryption");
hugoDecrypt(userStorage.getItem(storageKey), "storage");
}
};
&lt;/script>
&lt;/hugo-encrypt></description></item><item><title>The Summary of 2019</title><link>//blog.xetri.net/2019/12/the-summary-of-2019/</link><pubDate>Tue, 24 Dec 2019 15:00:08 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.xetri.net/2019/12/the-summary-of-2019/</guid><description>&lt;p>今年是暖冬，所以即使已过了冬至，广州的天气还只是秋瑟中带点凉意，1111 淘宝买的冬衣还没一次穿过出街==！&lt;/p>
&lt;hugo-encrypt>
&lt;div class="hugo-encrypt-encryption-notice">
&lt;p class="hugo-encryptor-tips">文章的部分内容被密码保护：&lt;/p>
&lt;noscript>&lt;span id="hugo-encrypt-enable-js">Javascript needs to be enabled to decrypt content&lt;/span>&lt;/noscript>
&lt;div class='hugo-encrypt-form'>
&lt;input
class="hugo-encrypt-input"
id="hugo-encrypt-password"
placeholder='请输入密码'
/>
&lt;input
class="hugo-encrypt-button"
type="button"
value='点击验证'
id="button" onclick="hugoDecrypt(document.getElementById('hugo-encrypt-password').value,'input')"
/>
&lt;span class="hugo-encrypt-input-response">&lt;/span>
&lt;/div>
&lt;/div>
&lt;cipher-text data-password='xetri123' style="display:none;">
&lt;p>上周 3 刚被公司裁员，年末正式加入失业大军，现在只能游荡在图书馆，消磨下时间。现在年龄已奔四，对于继续从事开发工作，总是充满焦虑，再投简历找工作，感觉已很困难了。&lt;/p>
&lt;p>自从去年老爸中风后，到现在有一年时间了，腿还是麻痹无力状态，还是没法自己走路。平时都需要老妈看着，的确太辛苦了。每当这时间就会感觉身体健康是多么重要。&lt;/p>
&lt;p>今年生活状态：&lt;/p>
&lt;ul>
&lt;li>新房入伙，入住新房&lt;/li>
&lt;li>未有女朋友，未婚&lt;/li>
&lt;li>未学车&lt;/li>
&lt;li>未会游泳&lt;/li>
&lt;/ul>
&lt;/cipher-text>
&lt;style type="text/css">div#hugo-encrypt-sha1sum {display: none;}&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/core.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/sha1.js">&lt;/script>
&lt;script>
const storageKey = location.pathname + "password";
const userStorage = localStorage ;
function str2buf(str) {
return new TextEncoder("utf-8").encode(str);
}
function buf2str(buffer) {
return new TextDecoder("utf-8").decode(buffer);
}
function hex2buf(hexStr) {
return new Uint8Array(hexStr.match(/.{2}/g).map(h => parseInt(h, 16)));
}
function deriveKey(passphrase, salt) {
salt = salt || crypto.getRandomValues(new Uint8Array(8));
return crypto.subtle
.importKey("raw", str2buf(passphrase), "PBKDF2", false, ["deriveKey"])
.then(key =>
crypto.subtle.deriveKey(
{ name: "PBKDF2", salt, iterations: 1000, hash: "SHA-256" },
key,
{ name: "AES-GCM", length: 256 },
false,
["encrypt", "decrypt"],
),
)
.then(key => [key, salt]);
}
function decrypt(passphrase, saltIvCipherHex) {
const [salt, iv, data] = saltIvCipherHex.split("-").map(hex2buf);
return deriveKey(passphrase, salt)
.then(([key]) => crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, data))
.then(v => buf2str(new Uint8Array(v)));
}
function removeNotice() {
var notices = document.getElementsByClassName("hugo-encrypt-encryption-notice");
for (let i = 0; i &lt; notices.length; i++) {
notices[i].remove();
}
}
const hugoDecrypt = function(password, type) {
for (const cipher of ciphers) {
decrypt(password, cipher.innerText).then(function(decrypted_text) {
let hash = CryptoJS.SHA1(decrypted_text.replace(/\r?\n?[^\r\n]*$/, ""));
let sha1_sum = CryptoJS.enc.Hex.stringify(hash);
if ( decrypted_text.includes(sha1_sum) ) {
removeNotice();
decrypted_text = decrypted_text.replace(/&lt;div.*?hugo-encrypt-sha1sum.*?>.*?&lt;\/div>/ig, '');
cipher.parentNode.outerHTML = decrypted_text;
userStorage.setItem(storageKey, password);
console.log("Decryption successful. Storing password in Storage.");
}
}).catch(function(error) {
if (type === "input") {
cipher.parentNode.querySelector('.hugo-encrypt-input-response').innerHTML = "密码错误";
console.log('密码错误', error);
} else if (type === "storage") {
userStorage.removeItem(location.pathname + "password");
console.log("Password changed. Clearing userStorage.", error);
}
});
}
};
&lt;/script>
&lt;script>
window.onload = () => {
ciphers = Array.from(document.querySelectorAll("cipher-text"));
if (userStorage.getItem(storageKey)) {
console.log("Found storageKey in userStorage. Attemtping decryption");
hugoDecrypt(userStorage.getItem(storageKey), "storage");
}
};
&lt;/script>
&lt;/hugo-encrypt></description></item><item><title>The Summary of 2017</title><link>//blog.xetri.net/2018/02/the-summary-of-2017/</link><pubDate>Wed, 14 Feb 2018 11:01:07 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.xetri.net/2018/02/the-summary-of-2017/</guid><description>&lt;p>还有一天就到2018农历新年了，时间实在过得太快。今年两老的身体都有些不好，就提前请假回家，现在已舒服呆在房间中了。家里的天气实在是舒服，阳光明媚，想起广州住处的阴冷天气就头痛，衣服实在不容易干。&lt;/p>
&lt;hugo-encrypt>
&lt;div class="hugo-encrypt-encryption-notice">
&lt;p class="hugo-encryptor-tips">文章的部分内容被密码保护：&lt;/p>
&lt;noscript>&lt;span id="hugo-encrypt-enable-js">Javascript needs to be enabled to decrypt content&lt;/span>&lt;/noscript>
&lt;div class='hugo-encrypt-form'>
&lt;input
class="hugo-encrypt-input"
id="hugo-encrypt-password"
placeholder='请输入密码'
/>
&lt;input
class="hugo-encrypt-button"
type="button"
value='点击验证'
id="button" onclick="hugoDecrypt(document.getElementById('hugo-encrypt-password').value,'input')"
/>
&lt;span class="hugo-encrypt-input-response">&lt;/span>
&lt;/div>
&lt;/div>
&lt;cipher-text data-password='xetri123' style="display:none;">
&lt;p>整理2017年的完成计划，发现还是有很多未完成：&lt;/p>
&lt;ul>
&lt;li>&lt;del>广州入户&lt;/del>&lt;/li>
&lt;li>学车&lt;/li>
&lt;li>学游泳&lt;/li>
&lt;li>学英语&lt;/li>
&lt;/ul>
&lt;p>入户从年初一直搞到年尾的11月份才搞完，被计生证和居住证卡了很长时间，还以为今年是办不了了，还好在10月份出了新政策——取消了计生证要求，居住证也侥幸通过审核了，剩下的就等8月份收楼后，迁到新房了：）&lt;/p>
&lt;p>学车学了几次就没动力了，开车要关注的太多了，还要养车。。。不过2018年会花多些时间学完，只要是方便接家人出去办事，到时再看下要不要买车位吧。&lt;/p>
&lt;p>今年感情上还是没大发展，一个人的确生活惯了，发现和人相处和追人实在没动力，感觉还有一点不想结婚。。。不过一个人生活病痛是个问题，12月份出现了一次剧烈的胃痛，当时真的痛到快晕过去了，但周围没人可以依靠带去医院，有时想，假如是遇到心脏抽搐的话，可能就一直没人发现了，唉。&lt;/p>
&lt;p>工作上也没大进展，维护的现有站点已经稳定了，技术上没什么挑战性，有些想离职，但现在年龄越来越大，找新的合适工作实在不容易，一年都在思考还适不适合做程序员，但找不到其他出路，有些想转做远程SOHO工作，但在中国不是太靠谱。&lt;/p>
&lt;p>新的一年，希望家人身体能健康快乐些，准备学下自己做饭，到下年春节可以自己来操劳下年夜饭。&lt;/p>
&lt;/cipher-text>
&lt;style type="text/css">div#hugo-encrypt-sha1sum {display: none;}&lt;/style>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/core.js">&lt;/script>
&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.9-1/sha1.js">&lt;/script>
&lt;script>
const storageKey = location.pathname + "password";
const userStorage = localStorage ;
function str2buf(str) {
return new TextEncoder("utf-8").encode(str);
}
function buf2str(buffer) {
return new TextDecoder("utf-8").decode(buffer);
}
function hex2buf(hexStr) {
return new Uint8Array(hexStr.match(/.{2}/g).map(h => parseInt(h, 16)));
}
function deriveKey(passphrase, salt) {
salt = salt || crypto.getRandomValues(new Uint8Array(8));
return crypto.subtle
.importKey("raw", str2buf(passphrase), "PBKDF2", false, ["deriveKey"])
.then(key =>
crypto.subtle.deriveKey(
{ name: "PBKDF2", salt, iterations: 1000, hash: "SHA-256" },
key,
{ name: "AES-GCM", length: 256 },
false,
["encrypt", "decrypt"],
),
)
.then(key => [key, salt]);
}
function decrypt(passphrase, saltIvCipherHex) {
const [salt, iv, data] = saltIvCipherHex.split("-").map(hex2buf);
return deriveKey(passphrase, salt)
.then(([key]) => crypto.subtle.decrypt({ name: "AES-GCM", iv }, key, data))
.then(v => buf2str(new Uint8Array(v)));
}
function removeNotice() {
var notices = document.getElementsByClassName("hugo-encrypt-encryption-notice");
for (let i = 0; i &lt; notices.length; i++) {
notices[i].remove();
}
}
const hugoDecrypt = function(password, type) {
for (const cipher of ciphers) {
decrypt(password, cipher.innerText).then(function(decrypted_text) {
let hash = CryptoJS.SHA1(decrypted_text.replace(/\r?\n?[^\r\n]*$/, ""));
let sha1_sum = CryptoJS.enc.Hex.stringify(hash);
if ( decrypted_text.includes(sha1_sum) ) {
removeNotice();
decrypted_text = decrypted_text.replace(/&lt;div.*?hugo-encrypt-sha1sum.*?>.*?&lt;\/div>/ig, '');
cipher.parentNode.outerHTML = decrypted_text;
userStorage.setItem(storageKey, password);
console.log("Decryption successful. Storing password in Storage.");
}
}).catch(function(error) {
if (type === "input") {
cipher.parentNode.querySelector('.hugo-encrypt-input-response').innerHTML = "密码错误";
console.log('密码错误', error);
} else if (type === "storage") {
userStorage.removeItem(location.pathname + "password");
console.log("Password changed. Clearing userStorage.", error);
}
});
}
};
&lt;/script>
&lt;script>
window.onload = () => {
ciphers = Array.from(document.querySelectorAll("cipher-text"));
if (userStorage.getItem(storageKey)) {
console.log("Found storageKey in userStorage. Attemtping decryption");
hugoDecrypt(userStorage.getItem(storageKey), "storage");
}
};
&lt;/script>
&lt;/hugo-encrypt></description></item></channel></rss>