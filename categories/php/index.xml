<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>php on cxfksword's notes</title><link>//blog.tri-lib.com/categories/php/</link><description>Recent content in php on cxfksword's notes</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><managingEditor>cxfksword@gmail.com (cxfksword)</managingEditor><webMaster>cxfksword@gmail.com (cxfksword)</webMaster><lastBuildDate>Wed, 08 Jul 2015 01:33:35 +0800</lastBuildDate><atom:link href="//blog.tri-lib.com/categories/php/index.xml" rel="self" type="application/rss+xml"/><item><title>使用gdb调试php的coredump文件</title><link>//blog.tri-lib.com/2015/07/2015-using-gdb-to-debug-php-coredump/</link><pubDate>Wed, 08 Jul 2015 01:33:35 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2015/07/2015-using-gdb-to-debug-php-coredump/</guid><description>&lt;p>使用xhprof测试slim框架的性能时，发现php抛了Segment Fault错误，试着使用gdb查看是什么导致的。&lt;/p>
&lt;h2 id="生成coredump文件">生成coredump文件&lt;/h2>
&lt;p>要生成php的coredump文件需要对系统进行一些配置，具体查看：&lt;a class="link" href="https://rtcamp.com/tutorials/php/core-dump-php5-fpm/" target="_blank" rel="noopener"
>Generating core-dump for php5-fpm&lt;/a>&lt;/p>
&lt;h2 id="使用gdb调试coredump文件">使用gdb调试coredump文件&lt;/h2>
&lt;p>执行gdb命令，因为coredump是php-fpm进程生成的，还需要指定php-fpm的路径，要不查看不了具体的代码执行信息。&lt;/p>
&lt;pre>&lt;code>$ gdb /usr/local/php5/sbin/php-fpm -c /tmp/core-php-fpm.1567
&lt;/code>&lt;/pre></description></item><item><title>在ubuntu中编译安装php</title><link>//blog.tri-lib.com/2013/11/install-php-from-source-in-ubuntu/</link><pubDate>Tue, 12 Nov 2013 01:07:00 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2013/11/install-php-from-source-in-ubuntu/</guid><description>&lt;h3 id="预装编译环境">预装编译环境&lt;/h3>
&lt;p>在ubuntu中执行下面命令安装编译依赖软件&lt;/p>
&lt;pre>&lt;code>&amp;gt; sudo apt-get install \
libxml2-dev \
libcurl4-openssl-dev \
libjpeg-dev \
libpng-dev \
libxpm-dev \
libmysqlclient-dev \
libpq-dev \
libicu-dev \
libfreetype6-dev \
libldap2-dev \
libxslt-dev
&lt;/code>&lt;/pre></description></item><item><title>捕捉php中的fatal error错误</title><link>//blog.tri-lib.com/2013/11/handle-fatal-error-in-php/</link><pubDate>Mon, 04 Nov 2013 00:48:00 +0800</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2013/11/handle-fatal-error-in-php/</guid><description>&lt;p>php中有三个函数与捕捉运行错误有关，分别是：&lt;/p>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/set_error_handler" target="_blank" rel="noopener"
>set_error_handler&lt;/a>：运行错误处理函数，php内核执行代码出错时一般是触发error，而不是抛异常，抛异常是面向对象编程中用的&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/set_exception_handler" target="_blank" rel="noopener"
>set_exception_handler&lt;/a>：运行异常信息处理函数，当代码中throw的异常没有被try-catch捕获时，就会调用该函数。php中error和exception的区别可以看这篇回答：&lt;a class="link" href="http://stackoverflow.com/questions/841500/php-exceptions-vs-errors" target="_blank" rel="noopener"
>php-exceptions-vs-errors&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;a class="link" href="http://cn2.php.net/register_shutdown_function" target="_blank" rel="noopener"
>register_shutdown_function&lt;/a>：脚本关闭执行函数，会在php脚本每次执行完成退出前运行。&lt;/p>
&lt;/blockquote>
&lt;p>为了保证运行错误能被顺利捕捉到，必须保证在有错的程序执行前先注册了错误处理函数。
一般错误处理代码结构如下：&lt;/p></description></item></channel></rss>