<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>.Net on cxfksword's notes</title><link>//blog.tri-lib.com/tags/.net/</link><description>Recent content in .Net on cxfksword's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>cxfksword@gmail.com (cxfksword)</managingEditor><webMaster>cxfksword@gmail.com (cxfksword)</webMaster><lastBuildDate>Sat, 12 May 2012 08:31:49 +0000</lastBuildDate><atom:link href="//blog.tri-lib.com/tags/.net/index.xml" rel="self" type="application/rss+xml"/><item><title>使用Mono.Cecil更改程序集dll特性</title><link>//blog.tri-lib.com/2012/05/use-mono-cecil-to-change-dll-attribute/</link><pubDate>Sat, 12 May 2012 08:31:49 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/05/use-mono-cecil-to-change-dll-attribute/</guid><description>&lt;p>工作中发现一个公共组件因为某个类不带有[Serializable]特性，导致保存到memcache时出错。刚好负责的同事请假不在，尝试了iLSpy反编译方法后，最后决定使用Mono.Cecil直接修改现成的程序集dll解决。&lt;/p>
&lt;p>示例代码如下：&lt;/p>
&lt;pre>&lt;code>class Program
{
static void Main(string[] args)
{
var asmFile = &amp;quot;TestDll.dll&amp;quot;; // 程序集名
Console.WriteLine(&amp;quot;add serializable attribute for '{0}'.&amp;quot;, asmFile);
var asmDef = AssemblyDefinition.ReadAssembly(asmFile, new ReaderParameters
{
ReadSymbols = true // 标识是否读取修改pdb文件
});
// 取类名中包含&amp;quot;Entity&amp;quot;字符串的类
var types = asmDef.Modules
.SelectMany(m =&amp;gt; m.Types)
.Where(t =&amp;gt; t.Name.Contains(&amp;quot;Entity&amp;quot;));
// 设置类为可序列化
foreach (var type in types)
{
type.IsSerializable = true;
}
// 重新保存dll
var newAsmFileName = &amp;quot;TestDll_new.dll&amp;quot;;
asmDef.Write(newAsmFileName, new WriterParameters
{
WriteSymbols = true
});
Console.WriteLine(&amp;quot;new dll has save as {0}.&amp;quot;, newAsmFileName);
}
}
&lt;/code>&lt;/pre>
&lt;p>Mono.Cecil除了可以更改特性，还能把sealed类更改为public类，功能非常强大。&lt;/p></description></item><item><title>Molas——.NET依赖分离框架</title><link>//blog.tri-lib.com/2012/02/molas-isolation-framework/</link><pubDate>Tue, 14 Feb 2012 17:29:51 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/02/molas-isolation-framework/</guid><description>&lt;p>&lt;img src="http://research.microsoft.com/en-us/projects/pex/pexweb.png" alt="">&lt;a href="http://research.microsoft.com/en-us/projects/moles/">Moles&lt;/a>是由微软研究院(&lt;a href="http://research.microsoft.com">Microsoft Research&lt;/a>)开发的.NET依赖分离框架，它实现了使用自定义的委托(delegate)方法来替换原有类中的方法，以达到分离依赖，方便单元测试的目的。Moles在功能和用法上与开源的IoC框架Moq很像，但Moles有一些Moq实现不了功能，如替换静态方法，去掉静态构造函数，突破访问限制等。Molas非常有利于对ASP.NET WebForm构建的网站和依赖第三方类库的程序进行单元测试。&lt;/p>
&lt;h2 id="heading">下载和安装&lt;/h2>
&lt;p>&lt;a href="http://research.microsoft.com/en-us/projects/pex/downloads.aspx">下载Moles&lt;/a>后直接安装就可以了，里面集成有VS2010的插件，安装成功后，VS2010右键菜单中会集成Moles功能菜单。&lt;/p></description></item><item><title>使windows服务安装名称可配置</title><link>//blog.tri-lib.com/2012/01/config-windows-services-install-name/</link><pubDate>Thu, 12 Jan 2012 07:42:04 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/01/config-windows-services-install-name/</guid><description>&lt;p>有时，我们安装的windows服务可能是个框架，在同一服务器上可能服务于不同的系统，为了使服务名称不冲突，需要把服务名称更改为可配置。
因为ServiceInstaller能直接设置安装服务的名称和描述，所以很容易就能写出下面的代码：&lt;/p>
&lt;pre>&lt;code>serviceInstaller.ServiceName = ConfigurationManager.AppSetting[&amp;quot;ServiceName&amp;quot;];
serviceInstaller.Description = ConfigurationManager.AppSetting[&amp;quot;ServiceDescription&amp;quot;];
&lt;/code>&lt;/pre>
&lt;p>编译执行安装，可惜抛出了异常，安装失败了。
&lt;a href="http://cxfksword.me/wp-content/uploads/2012/01/QQ%E4%BA%94%E7%AC%94%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D.png">&lt;img src="http://cxfksword.me/wp-content/uploads/2012/01/QQ%E4%BA%94%E7%AC%94%E6%88%AA%E5%9B%BE%E6%9C%AA%E5%91%BD%E5%90%8D.png" alt="">&lt;/a>
失败的原因是，执行安装服务的程序是InstallUtil.exe，安装阶段不会自动加载服务的app.config配置文件，只会加载全局的machine.config，需改为手动加载app.config并读取。
确定解决思路后，我写出了下面的代码：&lt;/p></description></item></channel></rss>