<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WinDbg on cxfksword's notes</title><link>//blog.tri-lib.com/tags/windbg/</link><description>Recent content in WinDbg on cxfksword's notes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><managingEditor>cxfksword@gmail.com (cxfksword)</managingEditor><webMaster>cxfksword@gmail.com (cxfksword)</webMaster><lastBuildDate>Tue, 24 Apr 2012 15:52:37 +0000</lastBuildDate><atom:link href="//blog.tri-lib.com/tags/windbg/index.xml" rel="self" type="application/rss+xml"/><item><title>WinDbg入门</title><link>//blog.tri-lib.com/2012/04/windbg-tutorial/</link><pubDate>Tue, 24 Apr 2012 15:52:37 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/04/windbg-tutorial/</guid><description>&lt;p>这是准备在每周技术分享会中分享的内容，但因为团队都忙于各种需求和服务器迁移，分享就一直搁置了。&lt;/p>
&lt;p>这个ppt还是有用心做的，如ppt的背景，和debug流程的箭头都是使用photoshop偷下来的= =！&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>示例程序：&lt;a href="http://cxfksword.me/wp-content/uploads/2012/04/WindbgTestExample.zip">Download Example&lt;/a>&lt;/p></description></item><item><title>WinDbg常用命令</title><link>//blog.tri-lib.com/2012/02/windbg-useful-commands/</link><pubDate>Thu, 02 Feb 2012 03:33:37 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/02/windbg-useful-commands/</guid><description>&lt;p>&lt;a href="2012/02/intro-to-windbg-for-dotnet-developers/">前一篇文章&lt;/a>介绍了WinDbg入门，本篇主要介绍WinDbg常用命令和用法。&lt;/p>
&lt;p>调试程序的CPU满载问题，关键是要知道程序当前正在进行什么操作。假如我们在cpu满载时创建了一个dump文件，使用下面几个命令可以查看当前程序正在进行什么处理：
&lt;strong>.time&lt;/strong>
运行.time命令会显示时间相关的信息，如系统运行时间，进程运行时间和CPU花费在内核态和用户态的时间。&lt;/p>
&lt;pre>&lt;code>0:000&amp;gt; .time
Debug session time: Tue Oct 23 08:38:35.000 2007 (GMT+1)
System Uptime: 4 days 17:48:01.906
Process Uptime: 0 days 0:24:37.000
Kernel time: 0 days 0:04:23.000
User time: 0 days 0:03:28.000
&lt;/code>&lt;/pre>
&lt;p>你可以看到系统已正常运行超过4天，进程运行了24分钟，CPU在内核态和用户态累积使用了8分钟。根据进程时间和CPU时间能大概估算出CPU使用率平均值是32.5%。&lt;/p></description></item><item><title>面向.NET开发人员的WinDbg入门教程</title><link>//blog.tri-lib.com/2012/02/intro-to-windbg-for-dotnet-developers/</link><pubDate>Wed, 01 Feb 2012 08:28:43 +0000</pubDate><author>cxfksword@gmail.com (cxfksword)</author><guid>//blog.tri-lib.com/2012/02/intro-to-windbg-for-dotnet-developers/</guid><description>&lt;p>原文：&lt;a href="http://blogs.msdn.com/b/kaevans/archive/2011/04/11/intro-to-windbg-for-net-developers.aspx">http://blogs.msdn.com/b/kaevans/archive/2011/04/11/intro-to-windbg-for-net-developers.aspx
&lt;/a> 翻译：cxfksword&lt;/p>
&lt;p>当你的代码发布为产品后，无论是在其他人的电脑中运行，还是部署到服务器中，你通常不再能访问到它的程序文件，也不能观察到代码的当前运行情况和运行环境。当你的代码在新的环境运行时，有很多因素会影响到程序的运行情况，如服务器系统打了更新补丁，网络策略改变，防火墙规则限制，磁盘权限配置等等。当代码运行不正常时，你可能只能靠代码中各处输出的日志来判断运行情况。但只靠输出日志，你有时还是不能判断故障出现的原因。&lt;/p>
&lt;p>在不浪费客户时间的同时做故障排除对你是个很大的挑战，因为不会有客户喜欢被一个搞技术的家伙不断问是点了那个按钮操作了哪些步骤导致程序出错的。boss也不会给你几天甚至几周的时间让你慢慢排除故障，你必须现在就知道到底发生了什么。&lt;/p>
&lt;p>理想情况下，你应该能看到堆栈跟踪，能查看到当前的变量值，能调试代码。事实证明你可以做到这点。。。而且不需要附加到客户环境中！&lt;/p></description></item></channel></rss>